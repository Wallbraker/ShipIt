module ship.http.win;

/+
version(Windows):

import core.windows.windows;

extern(Windows):

alias HINTERNET = void*;
alias LPHINTERNET = HINTERNET*;
alias INTERNET_PORT = WORD;
alias LPINTERNET_PORT = INTERNET_PORT*;
alias INTERNET_SCHEME = int;
alias LPINTERNET_SCHEME = INTERNET_SCHEME*;

// Protocol 'Manifests'
enum : DWORD {
	INTERNET_DEFAULT_PORT       = 0,
	INTERNET_DEFAULT_HTTP_PORT  = 80,
	INTERNET_DEFAULT_HTTPS_PORT = 443
}

// WinHttpOpen() Flags:
enum DWORD WINHTTP_FLAG_ASYNC = 0x10000000;

// WinHttpOpenRequest() Flags:
enum : DWORD {
	WINHTTP_FLAG_SECURE               = 0x00800000,
	WINHTTP_FLAG_ESCAPE_PERCENT       = 0x00000004,
	WINHTTP_FLAG_NULL_CODEPAGE        = 0x00000008,
	WINHTTP_FLAG_BYPASS_PROXY_CACHE   = 0x00000100,
	WINHTTP_FLAG_REFRESH              = 0x00000100,
	WINHTTP_FLAG_ESCAPE_DISABLE       = 0x00000040,
	WINHTTP_FLAG_ESCAPE_DISABLE_QUERY = 0x00000080,

	SECURITY_FLAG_IGNORE_UNKNOWN_CA        = 0x00000100,
	SECURITY_FLAG_IGNORE_CERT_DATE_INVALID = 0x00002000,
	SECURITY_FLAG_IGNORE_CERT_CN_INVALID   = 0x00001000,
	SECURITY_FLAG_IGNORE_CERT_WRONG_USAGE  = 0x00000200
}


struct WINHTTP_ASYNC_RESULT {
	DWORD_PTR dwResult;
	DWORD dwError;
}
alias LPWINHTTP_ASYNC_RESULT = WINHTTP_ASYNC_RESULT*;

struct HTTP_VERSION_INFO {
	DWORD dwMajorVersion;
	DWORD dwMinorVersion;
}
alias LPHTTP_VERSION_INFO = HTTP_VERSION_INFO*;

enum : DWORD {
	WINHTTP_ACCESS_TYPE_DEFAULT_PROXY             = 0,
	WINHTTP_ACCESS_TYPE_NO_PROXY                  = 1,
	WINHTTP_ACCESS_TYPE_NAMED_PROXY               = 3,
	WINHTTP_ACCESS_TYPE_AUTOMATIC_PROXY           = 4
}
enum LPCWSTR WINHTTP_NO_PROXY_NAME         = null;
enum LPCWSTR WINHTTP_NO_PROXY_BYPASS       = null;

enum LPCWSTR WINHTTP_NO_REFERER             = null;
enum LPCWSTR * WINHTTP_DEFAULT_ACCEPT_TYPES = null;

enum LPCWSTR WINHTTP_NO_ADDITIONAL_HEADERS = null;
enum LPVOID WINHTTP_NO_REQUEST_DATA        = null;

enum LPCWSTR WINHTTP_HEADER_NAME_BY_INDEX  = null;
enum LPVOID WINHTTP_NO_OUTPUT_BUFFER       = null;
enum LPDWORD WINHTTP_NO_HEADER_INDEX       = null;


enum : DWORD {
    WINHTTP_ERROR_BASE                   = 12000,

    ERROR_WINHTTP_OUT_OF_HANDLES         = (WINHTTP_ERROR_BASE + 1),
    ERROR_WINHTTP_TIMEOUT                = (WINHTTP_ERROR_BASE + 2),
    ERROR_WINHTTP_INTERNAL_ERROR         = (WINHTTP_ERROR_BASE + 4),
    ERROR_WINHTTP_INVALID_URL            = (WINHTTP_ERROR_BASE + 5),
    ERROR_WINHTTP_UNRECOGNIZED_SCHEME    = (WINHTTP_ERROR_BASE + 6),
    ERROR_WINHTTP_NAME_NOT_RESOLVED      = (WINHTTP_ERROR_BASE + 7),
    ERROR_WINHTTP_INVALID_OPTION         = (WINHTTP_ERROR_BASE + 9),
    ERROR_WINHTTP_OPTION_NOT_SETTABLE    = (WINHTTP_ERROR_BASE + 11),
    ERROR_WINHTTP_SHUTDOWN               = (WINHTTP_ERROR_BASE + 12),

    ERROR_WINHTTP_LOGIN_FAILURE          = (WINHTTP_ERROR_BASE + 15),
    ERROR_WINHTTP_OPERATION_CANCELLED    = (WINHTTP_ERROR_BASE + 17),
    ERROR_WINHTTP_INCORRECT_HANDLE_TYPE  = (WINHTTP_ERROR_BASE + 18),
    ERROR_WINHTTP_INCORRECT_HANDLE_STATE = (WINHTTP_ERROR_BASE + 19),
    ERROR_WINHTTP_CANNOT_CONNECT         = (WINHTTP_ERROR_BASE + 29),
    ERROR_WINHTTP_CONNECTION_ERROR       = (WINHTTP_ERROR_BASE + 30),
    ERROR_WINHTTP_RESEND_REQUEST         = (WINHTTP_ERROR_BASE + 32),

    ERROR_WINHTTP_CLIENT_AUTH_CERT_NEEDED = (WINHTTP_ERROR_BASE + 44),

    ERROR_WINHTTP_CANNOT_CALL_BEFORE_OPEN = (WINHTTP_ERROR_BASE + 100),
    ERROR_WINHTTP_CANNOT_CALL_BEFORE_SEND = (WINHTTP_ERROR_BASE + 101),
    ERROR_WINHTTP_CANNOT_CALL_AFTER_SEND  = (WINHTTP_ERROR_BASE + 102),
    ERROR_WINHTTP_CANNOT_CALL_AFTER_OPEN  = (WINHTTP_ERROR_BASE + 103),

    ERROR_WINHTTP_HEADER_NOT_FOUND           = (WINHTTP_ERROR_BASE + 150),
    ERROR_WINHTTP_INVALID_SERVER_RESPONSE    = (WINHTTP_ERROR_BASE + 152),
    ERROR_WINHTTP_INVALID_HEADER             = (WINHTTP_ERROR_BASE + 153),
    ERROR_WINHTTP_INVALID_QUERY_REQUEST      = (WINHTTP_ERROR_BASE + 154),
    ERROR_WINHTTP_HEADER_ALREADY_EXISTS      = (WINHTTP_ERROR_BASE + 155),
    ERROR_WINHTTP_REDIRECT_FAILED            = (WINHTTP_ERROR_BASE + 156),

    ERROR_WINHTTP_AUTO_PROXY_SERVICE_ERROR  = (WINHTTP_ERROR_BASE + 178),
    ERROR_WINHTTP_BAD_AUTO_PROXY_SCRIPT     = (WINHTTP_ERROR_BASE + 166),
    ERROR_WINHTTP_UNABLE_TO_DOWNLOAD_SCRIPT = (WINHTTP_ERROR_BASE + 167),
    ERROR_WINHTTP_UNHANDLED_SCRIPT_TYPE     = (WINHTTP_ERROR_BASE + 176),
    ERROR_WINHTTP_SCRIPT_EXECUTION_ERROR    = (WINHTTP_ERROR_BASE + 177),

    ERROR_WINHTTP_NOT_INITIALIZED        = (WINHTTP_ERROR_BASE + 172),
    ERROR_WINHTTP_SECURE_FAILURE         = (WINHTTP_ERROR_BASE + 175),

    ERROR_WINHTTP_SECURE_CERT_DATE_INVALID  = (WINHTTP_ERROR_BASE + 37),
    ERROR_WINHTTP_SECURE_CERT_CN_INVALID    = (WINHTTP_ERROR_BASE + 38),
    ERROR_WINHTTP_SECURE_INVALID_CA         = (WINHTTP_ERROR_BASE + 45),
    ERROR_WINHTTP_SECURE_CERT_REV_FAILED    = (WINHTTP_ERROR_BASE + 57),
    ERROR_WINHTTP_SECURE_CHANNEL_ERROR      = (WINHTTP_ERROR_BASE + 157),
    ERROR_WINHTTP_SECURE_INVALID_CERT       = (WINHTTP_ERROR_BASE + 169),
    ERROR_WINHTTP_SECURE_CERT_REVOKED       = (WINHTTP_ERROR_BASE + 170),
    ERROR_WINHTTP_SECURE_CERT_WRONG_USAGE   = (WINHTTP_ERROR_BASE + 179),

    ERROR_WINHTTP_AUTODETECTION_FAILED                  = (WINHTTP_ERROR_BASE + 180),
    ERROR_WINHTTP_HEADER_COUNT_EXCEEDED                 = (WINHTTP_ERROR_BASE + 181),
    ERROR_WINHTTP_HEADER_SIZE_OVERFLOW                  = (WINHTTP_ERROR_BASE + 182),
    ERROR_WINHTTP_CHUNKED_ENCODING_HEADER_SIZE_OVERFLOW = (WINHTTP_ERROR_BASE + 183),
    ERROR_WINHTTP_RESPONSE_DRAIN_OVERFLOW               = (WINHTTP_ERROR_BASE + 184),
    ERROR_WINHTTP_CLIENT_CERT_NO_PRIVATE_KEY            = (WINHTTP_ERROR_BASE + 185),
    ERROR_WINHTTP_CLIENT_CERT_NO_ACCESS_PRIVATE_KEY     = (WINHTTP_ERROR_BASE + 186),

    WINHTTP_ERROR_LAST                                  = (WINHTTP_ERROR_BASE + 186)
}



HINTERNET WinHttpConnect(HINTERNET hSession, LPCWSTR pswzServerName, INTERNET_PORT nServerPort, DWORD dwReserved);

BOOL WinHttpAddRequestHeaders(HINTERNET hRequest, LPCWSTR pwszHeaders, DWORD dwHeadersLength, DWORD dwModifiers);

BOOL WinHttpCheckPlatform();

BOOL WinHttpCloseHandle(HINTERNET hInternet);

HINTERNET WinHttpOpen(LPCWSTR pwszUserAgent, DWORD dwAccessType, LPCWSTR pwszProxyName, LPCWSTR pwszProxyBypass, DWORD dwFlags);

HINTERNET WinHttpOpenRequest(HINTERNET hConnect, LPCWSTR pwszVerb, LPCWSTR pwszObjectName, LPCWSTR pwszVersion, LPCWSTR pwszReferrer, LPCWSTR *ppwszAcceptTypes, DWORD dwFlags);

BOOL WinHttpQueryDataAvailable(HINTERNET hRequest, LPDWORD lpdwNumberOfBytesAvailable);

BOOL WinHttpReadData(HINTERNET hRequest, LPVOID lpBuffer, DWORD dwNumberOfBytesToRead, LPDWORD lpdwNumberOfBytesRead);

BOOL WinHttpReceiveResponse(HINTERNET hRequest, LPVOID lpReserved);

BOOL WinHttpSendRequest(HINTERNET hRequest, LPCWSTR pwszHeaders, DWORD dwHeadersLength, LPVOID lpOptional, DWORD dwOptionalLength, DWORD dwTotalLength, DWORD_PTR dwContext);
+/
